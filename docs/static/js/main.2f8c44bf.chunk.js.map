{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototypes","PropTypes","func","isRequired","getGrifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loanding","state","setstate","useEffect","then","imgs","useFetchGifs","key","GifExpertApp","categorias","ReactDOM","render","document","getElementById"],"mappings":"wPAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAchD,OACE,0BAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAWP,GAAX,mBAA0BO,OACxCN,EAAc,OAMd,2BAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAdhB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,YAkB3BZ,EAAYe,WAAa,CACvBd,c,OAAee,EAAUC,KAAKC,Y,2BCzBnBC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAChBC,EADgB,iDACgCC,UACpDH,GAFoB,+DAIHI,MAAMF,GAJH,cAIhBG,EAJgB,gBAKCA,EAAKC,OALN,uBAKdC,EALc,EAKdA,KACFC,EAAOD,EAAKE,KAAI,SAACC,GAAS,IAAD,EAC7B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVhB,kBAafM,GAbe,4CAAH,sDCERO,EAAc,SAAC,GAAoB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IACnC,OACE,yBAAKc,UAAU,0CACb,yBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,+BAAKA,EAAL,OCFOO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAc,IAAD,EACdlB,mBAAS,CACjCyB,KAAM,GACNa,UAAU,IAH4B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAASC,GAAUwB,MAAK,SAACC,GACvBH,EAAS,CACPf,KAAMkB,EACNL,UAAU,SAGb,CAACpB,IAEGqB,EDb4BK,CAAa1B,GAAlCa,EADyB,EAC/BN,KAAca,EADiB,EACjBA,SAEtB,OACE,oCACE,wBAAIJ,UAAU,qCAAd,IAAoDhB,EAApD,KACCoB,GAAY,uBAAGJ,UAAU,oCAAb,YACb,yBAAKA,UAAU,aACZH,EAAOJ,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eAAaiB,IAAKjB,EAAIC,IAAQD,UET3BkB,EAAe,WAAO,IAAD,EACI9C,mBAAS,CAAC,cADd,mBACzB+C,EADyB,KACbhD,EADa,KAOhC,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACGgD,EAAWpB,KAAI,SAACT,GAAD,OACd,kBAAC,EAAD,CAAS2B,IAAK3B,EAAUA,SAAUA,UCd5C8B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,W","file":"static/js/main.2f8c44bf.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategorias }) => {\n  const [inputValue, setInputValue] = useState(\"\"); //string vacio\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 2) {\n      setCategorias((cats) => [inputValue, ...cats]);\n      setInputValue(\"\");\n    }\n    //console.log('Submit hecho')\n  };\n  return (\n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n    </form>\n  );\n};\n\nAddCategory.prototypes = {\n  setCategorias: PropTypes.func.isRequired,\n};\n","export const getGrifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=MczHb6yfC61XIuz6jS0H0XYjO0lpPx0j`;\n  const resp = await fetch(url);\n  const { data } = await resp.json();\n  const gifs = data.map((img) => {\n    return {\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p> {title} </p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data: images, loanding } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__fedeIn\"> {category} </h3>\n      {loanding && <p className=\"animate__animated animate__flash\">loanding</p>}\n      <div className=\"card-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useState, useEffect } from \"react\";\nimport { getGrifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loanding: true,\n  });\n\n  useEffect(() => {\n    getGrifs(category).then((imgs) => {\n      setstate({\n        data: imgs,\n        loanding: false,\n      });\n    });\n  }, [category]);\n\n  return state; //{ data:[], loanding: true};\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nexport const GifExpertApp = () => {\n  const [categorias, setCategorias] = useState([\"One Punch\"]);\n  // const handleAdd = () => {\n  // setCategorias([...categorias, 'HunterXHunter'] );\n  // setCategorias((cats) => [...cats, \"HunterXHunter\"]);\n  //};\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategorias={setCategorias} />\n      <hr />\n\n      <ol>\n        {categorias.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { GifExpertApp } from \"./GifExpertApp\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}